name: unittests

on:
  push:
    branches:
      - "master"
      - "add_ci"
  pull_request:
    branches:
      - "master"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        os:
          - ubuntu-20.04
          - macos-10.15
          - windows-2019
        compiler:
          # you can specify the version after `-` like "llvm-15.0.2".
          - llvm-15.0.2
          - gcc-11
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug

        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: windows-2019
            compiler: gcc-11

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc-11

          - compiler: llvm-15.0.2

          - os: macos-10.15

          # Set up preferred package generators, for given build configurations
          - build_type: Release

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-20.04
            compiler: gcc-11
            generator: "Unix Makefiles"
            build_type: Debug

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release

    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - uses: actions/checkout@v3

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}

          cmake: true
          ninja: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}
          cppcheck: true

      - name: Configure CMake
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build
        run: |
          cmake --build build

      - name: Test
        run: |
          ./tests/${{matrix.build_type}}/run_it
